{"version":3,"sources":["components/app-info/app-info.js","components/todo-add-form/todo-add-form.js","components/todo-list-item/todo-list-item.js","components/todo-lists-area/todo-lists-area.js","components/app/app.js","index.js"],"names":["AppInfo","props","dateNow","Date","day","getDate","month","getMonth","year","getFullYear","todos","completed","filter","item","length","className","id","TodoAddForm","onValueChange","e","setState","target","name","value","onSubmit","preventDefault","state","task","onAdd","this","type","placeholder","onChange","Component","TodoListItem","onDelete","onToggleImportant","onToggleCompleted","important","classNames","onContextMenu","checked","htmlFor","onClick","TodoListArea","elements","map","itemProps","App","addItem","saveState","maxId","newItem","localStorage","setItem","JSON","stringify","deleteItem","restored","getItem","parse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3ebca30.chunk.js","sourcesContent":["import \"./app-info.css\";\r\n\r\nconst AppInfo = (props) => {\r\n    \r\n    let dateNow = new Date();\r\n    const day = dateNow.getDate();\r\n    const month = dateNow.getMonth() + 1;\r\n    const year = dateNow.getFullYear();\r\n\r\n    const {todos} = props;\r\n    const completed = todos.filter(item => item.completed).length;\r\n\r\n    return (\r\n        <div className=\"app-info\">\r\n            <h2 id=\"today\">{`Today: ${day}/${month}/${year}`}</h2>\r\n            <h2 id=\"completed\">{`Completed: ${completed}/${todos.length}`}</h2>\r\n            <hr></hr>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppInfo;","import { Component } from 'react';\r\n\r\nimport './todo-add-form.css';\r\n\r\nclass TodoAddForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: \"\"\r\n        }\r\n    }\r\n\r\n    onValueChange = (e) => {\r\n        this.setState ({\r\n            [e.target.name ] : e.target.value\r\n        })\r\n    }   \r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.task.length >= 3) {\r\n            this.props.onAdd(this.state.task);\r\n            this.setState({\r\n                task: '',\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {task} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <form \r\n                    className=\"add-todo\"\r\n                    onSubmit={this.onSubmit}>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"message\" \r\n                        placeholder=\"Add task\" \r\n                        id=\"inputToDo\"\r\n                        name=\"task\"\r\n                        value={task}\r\n                        onChange={this.onValueChange}\r\n                    />\r\n                    <button\r\n                        type=\"submit\" \r\n                        className=\"add-item\">\r\n                        +\r\n                    </button>\r\n                </form>\r\n                <hr></hr>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoAddForm;","import './todo-list-item.css';\r\n\r\nconst TodoListItem = (props) => {\r\n\t\r\n\tconst {task, onDelete, onToggleImportant, onToggleCompleted, important, completed} = props;\r\n\r\n\tlet classNames = \"todo-task\";\r\n\tif (important) {\r\n\t\tclassNames += \" important\"\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li onContextMenu={onToggleImportant}>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"checkbox\" \r\n\t\t\t\tid=\"checkbox-0\"\r\n\t\t\t\tchecked={completed}\r\n\t\t\t\tonChange={onToggleCompleted}\r\n\t\t\t/>\r\n\t\t\t<label \r\n\t\t\t\thtmlFor=\"checkbox-0\" \r\n\t\t\t\tclassName={classNames}>\r\n\t\t\t\t{task}\r\n\t\t\t</label>\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"trash\"\r\n\t\t\t\tonClick={onDelete}></div>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default TodoListItem;\r\n","import TodoListItem from \"../todo-list-item/todo-list-item\";\r\nimport './todo-list-area.css';\r\n\r\nconst TodoListArea = ({todos, onDelete, onToggleImportant, onToggleCompleted}) => {\r\n\r\n    // перебор элементов из массива и создание нового массива\r\n    const elements = todos.map(item => {\r\n        const {id, ...itemProps} = item;\r\n        //вытаскиваю id из props\r\n        return (\r\n            <TodoListItem \r\n                key={id} \r\n                {...itemProps}\r\n                onDelete={() => onDelete(id)}\r\n                onToggleImportant={(e) => onToggleImportant(id, e.preventDefault())}\r\n                onToggleCompleted={() => onToggleCompleted(id)}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <ul className=\"todo-list\" id=\"checklist\">\r\n            {elements}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default TodoListArea;","import { Component } from 'react';\n\nimport AppInfo from '../app-info/app-info';\nimport TodoAddForm from '../todo-add-form/todo-add-form';\nimport TodoListArea from '../todo-lists-area/todo-lists-area';\n\nimport './app.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst restored = localStorage.getItem('todos');\n\t\tthis.state = restored ? JSON.parse(restored) : { todos: [], maxId: 0 };\n\t}\n\n\taddItem = (task) => {\n\t\tthis.saveState (({todos, maxId}) => {\n\t\t\tconst newItem = {\n\t\t\t\ttask,\n\t\t\t\timportant: false,\n\t\t\t\tcompleted: false,\n\t\t\t\tid: maxId + 1\n\t\t\t}\n\t\t\t\n\t\t\tconst newArr = [...todos, newItem];\n\t\t\treturn {\n\t\t\t\ttodos: newArr,\n\t\t\t\tmaxId: maxId + 1\n\t\t\t}\n\t\t})\n\t}\n\n\tsaveState = (state) => {\n\t\tthis.setState(state, () => {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify(this.state));\n\t\t});\n\t}\n\n\tdeleteItem = (id) => {\n\t\tthis.saveState(({todos}) => {\n\t\t\treturn {\n\t\t\t\ttodos: todos.filter(item => item.id !== id) \n\t\t\t}\n\t\t})\n\t}\n\n\tonToggleImportant = (id) => {\n\t\tthis.saveState(({todos}) => ({\n\t\t\ttodos: todos.map(item => {\n\t\t\t\tif (item.id === id) {\n\t\t\t\t\treturn {...item, important: !item.important}\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t})\n\t\t}))\n\t}\n\n\tonToggleCompleted = (id) => {\n\t\tthis.saveState(({todos}) => ({\n\t\t\ttodos: todos.map(item => {\n\t\t\t\tif (item.id === id) {\n\t\t\t\t\treturn {...item, completed: !item.completed}\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t})\n\t\t}))\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<AppInfo todos={this.state.todos}/>\n\t\t\t\t<TodoAddForm onAdd={this.addItem} />\n\t\t\t\t<TodoListArea\n\t\t\t\t\ttodos={this.state.todos} \n\t\t\t\t\tonDelete={this.deleteItem}\n\t\t\t\t\tonToggleImportant={this.onToggleImportant}\n\t\t\t\t\tonToggleCompleted={this.onToggleCompleted}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}